{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbname","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradedneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,S,GAAS,CAAC,aAAD,C;AACTC,U,GAAU,C;AACVC,S,GAAS,Y;AAEXC,a,GAAa,I;AACbC,Q,GAAQ,I;;gCAECC,iB;AAEZ,iCAAc;AAAA;;AACb,WAAM,IAAIC,KAAJ,CAAW,uCAAX,CAAN;AACA;;;;qCAEsB;AACtB,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC,WAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,mBAAYI,gBAAZ,GAA+B,aAAK;AACnCT,0BAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACA,QAFD;;AAIAR,mBAAYS,SAAZ,GAAwB,aAAK;;AAE5B,YAAG,CAAChB,UAAJ,EAAgB;;AAEfA,sBAAaa,EAAEC,MAAF,CAASC,MAAtB;;AAEAd,iBAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;;AAEAA,oBAAWC,KAAX,GAAmB,YAAW;AAC7B,gBAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACA,UAFD;AAIA;;AAEDE,gBAAQL,UAAR;AAEA,QAhBD;;AAkBAO,mBAAYW,OAAZ,GAAsB,aAAK;AAC1BC,gBAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,eAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACA,QAHD;AAKA,OA9BM,CAAP;AA+BA;;;mCAEoBtB,U,EAAY;AAChCH,aAAO0B,OAAP,CAAe,iBAAS;;AAEvB,WAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACC1B,WAAW2B,iBAAX,CAA6BD,KAA7B;;AAED1B,kBAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AAEA,OAPD;AAQA;;;uCAEuB;AACvB,UAAI7B,UAAJ,EAAe;AACdC;AACAD,oBAAa,IAAb;AACA;AACD","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\nconst version = 4;\nconst dbname = 'aluraframe';\n\nlet connection = null;\nlet close = null;\n\nexport class ConnectionFactory {\n\n\tconstructor() {\n\t\tthrow new Error (\"Não é possivel instanciar esta classe\");\n\t}\n\n\tstatic getConnection() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet openRequest = window.indexedDB.open(dbname, version);\n\n\t\t\topenRequest.onupgradedneeded = e => {\n\t\t\t\tConnectionFactory._createStores(e.target.result);\n\t\t\t};\n\n\t\t\topenRequest.onsuccess = e => {\n\n\t\t\t\tif(!connection) { \n\n\t\t\t\t\tconnection = e.target.result;\n\n\t\t\t\t\tclose = connection.close.bind(connection);\n\n\t\t\t\t\tconnection.close = function() {\n\t\t\t\t\t\tthrow new Error(\"Voce nao pode fechar diretamente a conexao\")\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tresolve(connection);\n\n\t\t\t};\n\n\t\t\topenRequest.onerror = e => {\n\t\t\t\tconsole.log(e.target.error);\n\t\t\t\treject(e.target.error.name);\n\t\t\t};\n\n\t\t});\n\t}\n\n\tstatic _createStores(connection) {\n\t\tstores.forEach(store => {\n\n\t\t\tif (connection.objectStoreNames.contains(store)) \n\t\t\t\tconnection.deleteObjectStore(store);\n\n\t\t\tconnection.createObjectStore(store, { autoIncrement: true});\n\n\t\t});\n\t}\n\n\tstatic closeConnection(){\n\t\tif (connection){\n\t\t\tclose();\n\t\t\tconnection = null;\n\t\t}\n\t}\n\n}\n"]}